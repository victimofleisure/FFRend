<title>Patch Bay</title>
<body>

<h3>Patch Bay</h3>

<p>As of version 1.3, FFRend supports multi-input plugins. FFRend's default signal flow (linear from left to right) is adequate for single-input plugins, but for multi-input plugins, it's necessary to create explicit connections. This is typically done using the Patch Bay control bar. To show or hide the patch bay, use <span class="cmd">View/Patch Bay</span> or <span class="key">Shift+P</span>.

<p>The patch bay includes a panel for each plugin, and each panel contains one or more source drop-lists, depending on how many inputs the plugin has. The drop-list begins with a default option, followed by a list of the plugins in your project, each of which is a potential input source. A check appears next to the currently connected source. To connect the input to a source, select the source in the drop-list. To break the connection and restore the default signal flow, select &lt;default&gt;.

<p>Connections can also be made using the <span class="cmd">Plugin/Input</span> popup menus, or the plugin context menu (displayed when you right-click on a plugin tab), but the patch bay is more convenient, mainly because it allows you to see all of your connections at once. The patch bay also lets you quickly change the order of the plugins, by dragging them within the patch bay. Each patch bay row also has an Enable checkbox; unchecking it <a href="../Plugins/Bypass_and_solo.htm">bypasses</a> the corresponding plugin.

<p>The overall layout of connections between plugins is known as the <em>routing</em>. Routing doesn't have to be entirely explicit: it's fine to have a mix of explicit and default routing. Default routing requires less setup, and can be changed by simply reordering the plugins. One strategy is to only use explicit routing when necessary. Note that if you replace a plugin with a different one via <span class="cmd">Plugin/Load</span>, FFRend preserves the existing routing as much as possible; this allows you to audition plugins without having to redo your connections.

<p>It's possible to connect a plugin to itself, resulting in feedback. As with analog feedback, the output may saturate to white or black, or converge on a steady state, or may not get started without a seed, e.g. a video clip. <a href="../Parameters/Automating_parameters.htm">Automating</a> some of the effect parameters may help prevent a steady state from developing. More complex feedback can be generated by using longer signal loops involving more effects, and by using a mixer plugin to adjust the amount of feedback. For example, in the following setup, the signal flows from Chromium to Mixer, and then from Mixer to PanSpinZoom and back into Mixer; the more Mixer favors input B, the greater the amount of feedback.

<p>Note that in version 2, certain feedback cases can cause the engine to stall. These cases are esoteric and generally involve multiple feedback routes to the same plugin.

<p><table border=1 cellpadding=2 cellspacing=0>
<tr><th>Plugin</th><th>Input</th><th>Source</th><th>Comments</th></tr>
<tr><td>Chromium</td><td>&nbsp;</td><td>&lt;default&gt;</td><td>video clip or whatever</td></tr>
<tr><td>PanSpinZoom</td><td>&nbsp;</td><td>Mixer</td><td>feedback loop</td></tr>
<tr><td rowspan=2>Mixer</td><td>A</td><td>Chromium</td><td>routed over PanSpinZoom</tr>
<tr><td>B</td><td>PanSpinZoom</td><td>more B = more feedback</td></tr>
</table>

</body>
